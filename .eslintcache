[{"/home/james/github-finder/src/components/users/Search.js":"1","/home/james/github-finder/src/App.js":"2","/home/james/github-finder/src/components/users/User.js":"3","/home/james/github-finder/src/components/users/Users.js":"4","/home/james/github-finder/src/components/Pages/About.js":"5","/home/james/github-finder/src/components/repos/RepoItem.js":"6","/home/james/github-finder/src/components/repos/Repos.js":"7","/home/james/github-finder/src/components/layout/Alert.js":"8","/home/james/github-finder/src/components/layout/Navbar.js":"9"},{"size":1642,"mtime":1607716930910,"results":"10","hashOfConfig":"11"},{"size":5113,"mtime":1607723802809,"results":"12","hashOfConfig":"11"},{"size":3110,"mtime":1607721325995,"results":"13","hashOfConfig":"11"},{"size":837,"mtime":1607029725743,"results":"14","hashOfConfig":"11"},{"size":265,"mtime":1607267213944,"results":"15","hashOfConfig":"11"},{"size":329,"mtime":1607269364197,"results":"16","hashOfConfig":"11"},{"size":290,"mtime":1607269364198,"results":"17","hashOfConfig":"11"},{"size":250,"mtime":1607179908768,"results":"18","hashOfConfig":"11"},{"size":854,"mtime":1607267213946,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"f9f4za",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/james/github-finder/src/components/users/Search.js",[],["42","43"],"/home/james/github-finder/src/App.js",["44"],"import React, {useState, Fragment, useEffect} from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/layout/Navbar'\nimport Alert from './components/layout/Alert'\nimport Users from './components/users/Users'\nimport User from './components/users/User'\nimport Search from './components/users/Search'\nimport About from './components/Pages/About'\n\nimport axios from 'axios'\nimport './App.css';\n\n// this is the parent component of our application, all other components enter through here\nconst App = () => {\n\n  const [users, setUsers] = useState([]);\n  const [user, setUser] = useState({});\n  const [repos, setRepos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [alert, setAlert] = useState(null);\n\n  // FUNCTION that fetches Github user data from API, loads user data to DOM upon start of app\n  useEffect(async () =>{\n\n    // set state loading key value to true to show spinner gif\n    setLoading(true)\n\n    // GET request to Github API for first 30 users upon initial render\n    const res = await axios.get(\n          `https://api.github.com/users?client_id=${\n            process.env.REACT_APP_GITHUB_CLIENT_ID\n          }&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n\n    // update state users key value with users data returned from API\n    setUsers(res.data)\n\n    // set state loading key value to false to stop spinner gif\n    setLoading(false)\n    // eslint-disable-next-line\n  }, [])\n\n\n  //  FUNCTION uses the string from Search component, passed up as props, as query string\n  const searchUsers = async text => {\n\n    // set state loading key value to true to show spinner gif\n    setLoading(true)\n\n    // authenticated GET request to Github API '/search' endpoint with text from Search component\n    const res = await axios.get(\n       `https://api.github.com/search/users?q=${text}&client_id=${\n        process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${\n        process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n\n    // reset state to show users returned from search\n    setUsers(res.data.items);\n    // set loading to false\n    setLoading(false);\n  }\n\n  //  FUNCTION will clear searched users from state object\n  const clearUsers = () => {\n    setUsers([])\n    setLoading(false);\n  };\n\n  // FUNCTION will alert users to enter text for search query\n  const showAlert = (msg, type) =>{\n    setAlert({ msg, type })\n    setTimeout(()=> setAlert(null), 5000)\n  }\n\n  // FUNCTION will GET a single Github users info\n  const getUser = async (username) =>{\n\n    // set state loading key value to true to show spinner gif\n    setLoading(true);\n\n    //  add user login data returned from searchUsers function\n    const res = await axios.get(\n       `https://api.github.com/users/${username}?client_id=${\n        process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${\n        process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n\n    // update the state to show single user data returned from search\n    setUser( res.data );\n\n    // update loading attribute to false to stop spinner\n    setLoading(false);\n  }\n\n  // FUNCTION with GET all public repos for a single user\n  const getUserRepos = async (username) =>{\n\n    // set state loading key value to true to show spinner gif\n    setLoading( true );\n\n    //  add user login data returned from searchUsers function\n    const res = await axios.get(\n      `https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${\n        process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${\n          process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n\n    // update the state 'repos' to display user public repositories\n    setRepos( res.data );\n\n    // reset loading state attribute to false\n    setLoading( false );\n  }\n\n    return (\n      <Router>\n\n      <div className=\"App\">\n\n        <Navbar />\n        <div className='container'>\n\n            <Alert alert={alert}/>\n            <Switch>\n              <Route exact path='/' render={props => (\n                <Fragment>\n                  <Search\n                    searchUsers={searchUsers}\n                    clearUsers={clearUsers}\n                    // this boolean value will show clear button when users array has search result\n                    showClear={users.length > 0 ? true : false}\n                    setAlert={showAlert}\n                    />\n                  <Users\n                    loading={loading}\n                    users={users}\n                  />\n                </Fragment>\n              )}/>\n              <Route exact path='/about' component={About}/>\n              <Route\n                exact path='/user/:login'\n                render={props => (\n                  <User\n                    {...props}\n                    getUser={getUser}\n                    getUserRepos={getUserRepos}\n                    user={user}\n                    repos={repos}\n                    loading={loading}\n                  />\n                )}\n              />\n            </Switch>\n\n\n          </div>\n      </div>\n    </Router>\n    );\n}\n\nexport default App;\n","/home/james/github-finder/src/components/users/User.js",["45"],"import React, { Fragment, useEffect } from 'react';\nimport Spinner from '../layout/Spinner';\nimport Repos from '../repos/Repos'\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\n\n// COMPONENT will render when more button is clicked\nconst User = ( { user, loading, getUser, getUserRepos, repos, match } ) => {\n\n  // FUNCTION will load a single Github users page data when component is rendered\n  useEffect(() =>{\n    getUser(match.params.login)\n    getUserRepos(match.params.login)\n  }, [])\n\n    const {\n      name,\n      company,\n      avatar_url,\n      location,\n      bio,\n      blog,\n      login,\n      html_url,\n      followers,\n      following,\n      public_repos,\n      public_gists,\n      hireable\n    } = user;\n\n    if(loading ){ return <Spinner/> }\n\n      return (\n      <Fragment>\n        <br/>\n        {/* Show button to return home page */}\n        <Link to='/' className='btn btn-light'>\n          Back To Search\n        </Link>\n\n        {/* Show a check mark if user hireable attribute is true, x if false */}\n        Hireable: {''}\n        {hireable ? (\n          <i className='fas fa-check text-success'/>\n        ): (\n          <i className='fas fa-times-circle text-danger'/>\n        )}\n\n        {/* Display users avatar photo */}\n        <div className='card grid-2'>\n          <div className='all-center'>\n            <img\n              src={avatar_url}\n              className='round-img'\n              alt=''\n              style={{ width: '150px' }}\n            />\n\n            <h1>{name}</h1>\n            <p> Location: {location}</p>\n          </div>\n\n          <div>\n            {bio && <Fragment>\n              <h3>Biography</h3>\n              <p>{bio}</p>\n              </Fragment>\n            }\n            <a href={html_url} className=\"btn btn-dark my-1\">\n              GitHUb User Profile\n            </a>\n            <ul>\n              <li>\n                {login && <Fragment>\n                    <strong>Username:</strong> {login}\n                  </Fragment>}\n              </li>\n              <li>\n                {company && <Fragment>\n                    <strong>Company:</strong> {company}\n                  </Fragment>}\n              </li>\n              <li>\n                {blog && <Fragment>\n                    <strong>Website:</strong> {blog}\n                  </Fragment>}\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className='card text-center'>\n                <div className='badge badge-primary'> Followers: {followers}</div>\n                <div className='badge badge-success'> Following: {following}</div>\n                <div className='badge badge-light'> Public Repos: {public_repos}</div>\n                <div className='badge badge-dark'> Public Gists: {public_gists}</div>\n        </div>\n\n        <Repos repos={repos}/>\n\n      </Fragment>\n    );\n}\n\nUser.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  user: PropTypes.object.isRequired,\n  repos: PropTypes.array.isRequired,\n  getUser: PropTypes.func.isRequired,\n  getUserRepos: PropTypes.func.isRequired,\n}\n\nexport default User\n",["46","47"],"/home/james/github-finder/src/components/users/Users.js",[],"/home/james/github-finder/src/components/Pages/About.js",[],"/home/james/github-finder/src/components/repos/RepoItem.js",[],"/home/james/github-finder/src/components/repos/Repos.js",[],"/home/james/github-finder/src/components/layout/Alert.js",[],"/home/james/github-finder/src/components/layout/Navbar.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":23,"column":13,"nodeType":"54","endLine":40,"endColumn":4},{"ruleId":"52","severity":1,"message":"55","line":15,"column":6,"nodeType":"56","endLine":15,"endColumn":8,"suggestions":"57"},{"ruleId":"48","replacedBy":"58"},{"ruleId":"50","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'getUser', 'getUserRepos', and 'match.params.login'. Either include them or remove the dependency array. If 'getUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["62"],["60"],["61"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [getUser, getUserRepos, match.params.login]",{"range":"65","text":"66"},[514,516],"[getUser, getUserRepos, match.params.login]"]